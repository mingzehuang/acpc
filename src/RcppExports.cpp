// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// LRMultiClass_c
arma::colvec LRMultiClass_c(const arma::mat& X_ext, const arma::mat& X, const arma::uvec& y, int numIter, double eta, double lambda);
RcppExport SEXP _acpc_LRMultiClass_c(SEXP X_extSEXP, SEXP XSEXP, SEXP ySEXP, SEXP numIterSEXP, SEXP etaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_ext(X_extSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type numIter(numIterSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(LRMultiClass_c(X_ext, X, y, numIter, eta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// MyKmeans_c
arma::ucolvec MyKmeans_c(const arma::mat& X, int K, const arma::mat& M, int numIter);
RcppExport SEXP _acpc_MyKmeans_c(SEXP XSEXP, SEXP KSEXP, SEXP MSEXP, SEXP numIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type numIter(numIterSEXP);
    rcpp_result_gen = Rcpp::wrap(MyKmeans_c(X, K, M, numIter));
    return rcpp_result_gen;
END_RCPP
}
// procrustes
arma::mat procrustes(arma::mat& X, arma::mat& V);
RcppExport SEXP _acpc_procrustes(SEXP XSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(procrustes(X, V));
    return rcpp_result_gen;
END_RCPP
}
// soft_I
double soft_I(double a, double lambda);
RcppExport SEXP _acpc_soft_I(SEXP aSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_I(a, lambda));
    return rcpp_result_gen;
END_RCPP
}
// sparsePCA
Rcpp::List sparsePCA(arma::mat& X, arma::mat& Vstart, double lambda, double eps);
RcppExport SEXP _acpc_sparsePCA(SEXP XSEXP, SEXP VstartSEXP, SEXP lambdaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Vstart(VstartSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sparsePCA(X, Vstart, lambda, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_acpc_LRMultiClass_c", (DL_FUNC) &_acpc_LRMultiClass_c, 6},
    {"_acpc_MyKmeans_c", (DL_FUNC) &_acpc_MyKmeans_c, 4},
    {"_acpc_procrustes", (DL_FUNC) &_acpc_procrustes, 2},
    {"_acpc_soft_I", (DL_FUNC) &_acpc_soft_I, 2},
    {"_acpc_sparsePCA", (DL_FUNC) &_acpc_sparsePCA, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_acpc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
